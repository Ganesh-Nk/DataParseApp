@using System.Text.RegularExpressions
@model List<Dictionary<string, List<XmlData>>>
@{
    ViewData["Title"] = "XML Schema Data";
}

<style>
    :root {
        --primary-color: #2C3E50;
        --secondary-color: #E74C3C; 
        --tertiary-color: #ECF0F1; 
        --quaternary-color: #3498DB;
    }

    html, body {
        margin: 0;
        padding: 0;
        height: 100%; 
        display: flex;
        flex-direction: column;
    }

    body {
        background-color: var(--tertiary-color);
        display:flex;
		flex-direction: column;
        min-height:100vh;
    }

    .container {
        background-color: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        max-width: 1000px;
        margin: 0 auto;
        flex:1;       
    }

    .table-container {
        overflow-x: auto;
        flex: 1;
    }

    .highlight {
        background-color: #FFF3CD;
    }

    .highlight-row {
        animation: highlightFade 2s;
    }

    @@keyframes highlightFade {
        0%

    {
        background-color: #FFF3CD;
    }

    100% {
        background-color: transparent;
    }

    }

    .table {
        border-color: var(--primary-color);
        width: 100%;
        margin-bottom: 0;
    }

        .table thead th {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

            .table thead th a {
                color: white !important;
            }

        .table tbody tr:hover {
            background-color: var(--tertiary-color);
        }

    .btn-primary {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
    }

        .btn-primary:hover {
            background-color: #C0392B;
            border-color: #C0392B;
        }

    .form-control:focus {
        border-color: var(--quaternary-color);
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .page-link {
        color: var(--quaternary-color);
    }

    .page-item.active .page-link {
        background-color: var(--quaternary-color);
        border-color: var(--quaternary-color);
    }

    .search-box {
        background-color: white;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .table-container {
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        overflow-x: auto;
        flex: 1;
    }

    .sort-icon {
        margin-left: 0.5rem;
        color: rgba(255,255,255,0.7);
    }

    .table th:first-child,
    .table td:first-child {
        width: 40%;
    }

    .table th:last-child,
    .table td:last-child {
        width: 60%;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        list-style: none;
        padding: 0;
    }

        .pagination li {
            margin: 0 0.25rem;
        }

        .pagination .page-link {
            color: var(--primary-color);
            background-color: white;
            border: 1px solid var(--primary-color);
            padding: 0.5rem 0.75rem;
            border-radius: 0.25rem;
            text-decoration: none;
        }

            .pagination .page-link:hover {
                background-color: var(--primary-color);
                color: white;
            }

        .pagination .page-item.active .page-link {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .pagination .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: white;
            border-color: #dee2e6;
        }

    @@media (max-width: 768px) {
        .container

    {
        padding: 0.5rem;
    }

    .table-container {
        padding: 0.5rem;
    }

    .pagination {
        font-size: 0.9rem;
    }

    .page-link {
        padding: 0.4rem 0.8rem;
    }

    }

    .main-content {
        flex: 1 0 auto;
        padding: 20px;
    }

    .card {
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .card-header {
        cursor: pointer;
        transition: background-color 0.3s;
        background-color: #f8f9fa;
        padding: 1rem;
    }

    .card-header:hover {
        background-color: #e9ecef;
    }

    .toggle-icon {
        transition: transform 0.3s;
        font-size: 1.2rem;
        font-weight: bold;
        display: inline-block;
        width: 20px;
        text-align: center;
        line-height: 1;
    }

    .toggle-icon::before {
        content: '+';
    }

    .collapsed .toggle-icon::before {
        content: '+';
    }
    
    .btn-link:not(.collapsed) .toggle-icon::before {
        content: '-';
    }

    .card-body {
        padding: 1.25rem;
    }
    .pagination-container {
        margin-top: 15px;
    }

    .pagination .page-link {
        color: var(--primary-color);
        cursor: pointer;
    }

    .pagination .page-item.active .page-link {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
    }

    .page-link {
        padding: 8px 12px;
        border-radius: 4px;
    }

    .btn-link {
        text-decoration: none;
        color: inherit;
    }

    .btn-link:hover {
        text-decoration: none;
        color: inherit;
    }

    .card-header {
        padding: 0;
        background-color: transparent;
    }

    .card-header button {
        padding: 1rem;
        background-color: #f8f9fa;
        width: 100%;
        text-align: left;
        border: none;
    }

    .card-header button:hover {
        background-color: #e9ecef;
    }

    .btn-link {
        text-decoration: none;
        color: inherit;
    }

    .btn-link:hover,
    .btn-link:focus {
        text-decoration: none;
        color: inherit;
    }

    .search-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .search-container .input-group {
        position: relative;
    }

    .search-container .form-control {
        border-right: none;
        padding-right: 40px;
    }

    .search-container .form-control:focus {
        box-shadow: none;
        border-color: #ced4da;
    }

    .search-container .btn-primary {
        border-radius: 0 4px 4px 0;
        padding: 0.375rem 0.75rem;
    }

    .search-container .btn-primary:hover {
        background-color: var(--secondary-color);
    }  
    .table tr.hidden {
        display: none;
    }
    .highlight-match {
        background-color: #fff3cd;
        padding: 2px;
        border-radius: 2px;
        font-weight: bold;
    }

    .table tr {
        transition: all 0.3s ease;
    }

    .collapse {
        transition: all 0.3s ease;
    }

    .search-container .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(44, 62, 80, 0.25);
    }

    @@media (max-width: 768px) {
        .search-container {
            margin-bottom: 1rem;
        }
        
        .search-container .card-body {
            padding: 1rem;
        }
    }

    .sort-icons {
        float: right;
        cursor: pointer;
    }

    .sort-icons i {
        display: block;
        font-size: 0.8em;
        color: #fff;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    .sort-icons i:hover {
        opacity: 1;
    }

    .sort-icons i.active {
        opacity: 1;
        color: #ffd700;
    }

    th {
        position: relative;
        cursor: pointer;
    }
</style>

<div class="main-content">
    <div class="container">
    
        <div class="search-container mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-8 col-lg-6">
                            <div class="input-group">
                                <input type="text" 
                                       id="searchInput" 
                                       class="form-control" 
                                       placeholder="Type and press Enter or click Search..."
                                       aria-label="Search">
                                <button class="btn btn-primary" type="button" onclick="performSearch()">
                                    <i class="fas fa-search"></i> Search
                                </button>
                                <button class="btn btn-secondary" type="button" onclick="clearSearch()">
                                    <i class="fas fa-times"></i> Clear
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="mb-4">
            <label for="urlSelector" class="form-label">Select Version:</label>
            <select id="urlSelector" class="form-select" onchange="changeUrl(this)">
                <option value="https://receiptservice.egretail.cloud/ARTSPOSLogSchema/2.2.1" 
                        selected="@(ViewBag.SelectedUrl == "https://receiptservice.egretail.cloud/ARTSPOSLogSchema/2.2.1")">
                    Version 2.2.1
                </option>
                <option value="https://receiptservice.egretail.cloud/ARTSPOSLogSchema/6.0.0" 
                        selected="@(ViewBag.SelectedUrl == "https://receiptservice.egretail.cloud/ARTSPOSLogSchema/6.0.0")">
                    Version 6.0.0
                </option>
            </select>
        </div>

        @if (Model != null && Model.Any() && Model[0].Any())
        {
            <div class="accordion" id="xmlAccordion">
                @{var index = 0;}
                @foreach (var dataset in Model[0])
                {
                    var headerItem = dataset.Value.FirstOrDefault(x => x.IsHeader);
                    if (headerItem != null && dataset.Value.Any(x => !x.IsHeader && !string.IsNullOrWhiteSpace(x.Value)))
                    {
                        <div class="card mb-4">
                            <div class="card-header" id="heading_@index">
                                <button class="btn btn-link w-100 text-start d-flex justify-content-between align-items-center collapsed"
                                        type="button"
                                        data-bs-target="#collapse_@index"
                                        aria-expanded="false"
                                        aria-controls="collapse_@index">
                                    <div class="d-flex justify-content-between align-items-center w-100">
                                        <div>
                                            <h4 class="mb-0">@headerItem.Name</h4>
                                            @if (!string.IsNullOrEmpty(headerItem.Value))
                                            {
                                                <p class="text-muted mb-0">@headerItem.Value</p>
                                            }
                                        </div>
                                        <span class="toggle-icon ms-2"></span>
                                    </div>
                                </button>
                            </div>

                            <div id="collapse_@index" 
                                 class="collapse"
                                 aria-labelledby="heading_@index" 
                                 data-bs-parent="#xmlAccordion">
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <div class="table-container" id="table_@index">
                                            <table class="table table-bordered table-hover">
                                                <thead class="table-dark">
                                                    <tr>
                                                        <th>
                                                            Value
                                                            <span class="sort-icons">
                                                                <i class="fas fa-sort-up" onclick="sortTable('${tableId}', 0, 'asc')" title="Sort Ascending"></i>
                                                                <i class="fas fa-sort-down" onclick="sortTable('${tableId}', 0, 'desc')" title="Sort Descending"></i>
                                                            </span>
                                                        </th>
                                                        <th>
                                                            Description
                                                            <span class="sort-icons">
                                                                <i class="fas fa-sort-up" onclick="sortTable('${tableId}', 1, 'asc')" title="Sort Ascending"></i>
                                                                <i class="fas fa-sort-down" onclick="sortTable('${tableId}', 1, 'desc')" title="Sort Descending"></i>
                                                            </span>
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in dataset.Value.Where(x => !x.IsHeader))
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(item.Value))
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.Value</td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="pagination-container mt-3">
                                            <nav aria-label="Table pagination">
                                                <ul class="pagination justify-content-center" id="pagination_@index">
                                                </ul>
                                            </nav>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        index++;
                    }
                }
            </div>
        }
        else
        {
            <div class="alert alert-info">
                No data available for the selected version.
            </div>
        }
    </div>
</div>

<script>
    function changeUrl(selectElement) {
        var selectedUrl = selectElement.value;
        window.location.href = '@Url.Action("Index")?xmlUrl=' + encodeURIComponent(selectedUrl);
    }

    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(this, args);
            }, wait);
        };
    }
    const debouncedSearch = debounce(function() {
        requestAnimationFrame(() => {
            const searchInput = document.getElementById('searchInput');
            const searchText = searchInput.value.toLowerCase();
            if (searchText.length < 2) return;

            const accordionItems = document.querySelectorAll('.card');
            const matches = new Map();
            const updates = [];

            accordionItems.forEach(card => {
                const rows = card.querySelectorAll('tbody tr');
                let hasMatch = false;

                rows.forEach(row => {
                    const value = row.cells[0].textContent.toLowerCase();
                    const description = row.cells[1].textContent.toLowerCase();
                    
                    if (value.includes(searchText) || description.includes(searchText)) {
                        hasMatch = true;
                        updates.push(() => {
                            row.style.display = '';
                            row.cells[0].innerHTML = highlightMatch(row.cells[0].textContent, searchText);
                            row.cells[1].innerHTML = highlightMatch(row.cells[1].textContent, searchText);
                        });
                    } else {
                        updates.push(() => {
                            row.style.display = 'none';
                        });
                    }
                });

                matches.set(card, hasMatch);
            });

            requestAnimationFrame(() => {
                matches.forEach((hasMatch, card) => {
                    if (hasMatch || !searchText) {
                        card.style.display = '';
                        if (hasMatch) {
                            const collapseElement = card.querySelector('.collapse');
                            collapseElement.classList.add('show');
                            const button = card.querySelector('.btn-link');
                            button.classList.remove('collapsed');
                            button.setAttribute('aria-expanded', 'true');
                        }
                    } else {
                        card.style.display = 'none';
                    }
                });

                updates.forEach(update => update());
            });
        });
    }, 400);

    function highlightMatch(text, searchText) {
        if (!searchText) return text;
        const regex = new RegExp(`(${searchText})`, 'gi');
        return text.replace(regex, '<span class="highlight-match">$1</span>');
    }

    function clearSearch() {
        const searchInput = document.getElementById('searchInput');
        searchInput.value = '';
        document.querySelectorAll('.card').forEach(card => {
            card.style.display = '';
            card.querySelectorAll('tbody tr').forEach(row => {
                row.style.display = '';
                row.cells[0].innerHTML = row.cells[0].textContent;
                row.cells[1].innerHTML = row.cells[1].textContent;
            });
            const collapseElement = card.querySelector('.collapse');
            collapseElement.classList.remove('show');
            const button = card.querySelector('.btn-link');
            button.classList.add('collapsed');
            button.setAttribute('aria-expanded', 'false');
        });
    }

 
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        
        searchInput.addEventListener('input', debouncedSearch);

     
        document.querySelector('.btn-secondary').addEventListener('click', function() {
            searchInput.value = '';
            document.querySelectorAll('.card').forEach(card => {
                card.style.display = '';
                card.querySelectorAll('tbody tr').forEach(row => {
                    row.style.display = '';
                    row.cells[0].innerHTML = row.cells[0].textContent;
                    row.cells[1].innerHTML = row.cells[1].textContent;
                });
                const collapseElement = card.querySelector('.collapse');
                collapseElement.classList.remove('show');
                const button = card.querySelector('.btn-link');
                button.classList.add('collapsed');
                button.setAttribute('aria-expanded', 'false');
            });
        });
    });
    document.addEventListener('DOMContentLoaded', function() {
        const accordionItems = document.querySelectorAll('.card-header');
        
        accordionItems.forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                const button = this.querySelector('.btn-link');
                const contentId = button.getAttribute('data-bs-target');
                const content = document.querySelector(contentId);
                const isExpanded = content.classList.contains('show');
               
                if (isExpanded) {
                    content.classList.remove('show');
                    button.classList.add('collapsed');
                    button.setAttribute('aria-expanded', 'false');
                } else {
                   
                    const accordion = this.closest('.accordion');
                    accordion.querySelectorAll('.collapse.show').forEach(openSection => {
                        if (openSection.id !== contentId.substring(1)) {
                            openSection.classList.remove('show');
                            const otherButton = accordion.querySelector(`[data-bs-target="#${openSection.id}"]`);
                            otherButton.classList.add('collapsed');
                            otherButton.setAttribute('aria-expanded', 'false');
                        }
                    });                    
               
                    content.classList.add('show');
                    button.classList.remove('collapsed');
                    button.setAttribute('aria-expanded', 'true');
                }

                if (!isExpanded) {
                    const index = contentId.replace('#collapse_', '');
                    setTimeout(() => {
                        initializePagination(`table_${index}`, `pagination_${index}`);
                    }, 100);
                }
            });
        });
    });

    function initializePagination(tableId, paginationId) {
        const rowsPerPage = 10;
        const table = document.querySelector(`#${tableId} table`);
        const rows = table.querySelectorAll('tbody tr');
        const totalPages = Math.ceil(rows.length / rowsPerPage);
        
        if (totalPages <= 1) return;

        const paginationElement = document.getElementById(paginationId);
        paginationElement.dataset.currentPage = '1';
        paginationElement.dataset.totalPages = totalPages.toString();
        paginationElement.dataset.tableId = tableId;

        showPage(1, tableId, paginationId);
        const headers = table.querySelectorAll('th');
        
        headers.forEach((header, index) => {
            header.innerHTML = `
                ${header.textContent}
                <span class="sort-icons">
                    <i class="fas fa-sort-up" onclick="sortTable('${tableId}', ${index}, 'asc')" title="Sort Ascending"></i>
                    <i class="fas fa-sort-down" onclick="sortTable('${tableId}', ${index}, 'desc')" title="Sort Descending"></i>
                </span>
            `;
        });
    }

    function showPage(pageNum, tableId, paginationId) {
        const table = document.querySelector(`#${tableId} table`);
        const rows = table.querySelectorAll('tbody tr');
        const rowsPerPage = 10;
        const paginationElement = document.getElementById(paginationId);
        
        const start = (pageNum - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        rows.forEach((row, index) => {
            row.style.display = (index >= start && index < end) ? '' : 'none';
        });
        paginationElement.dataset.currentPage = pageNum.toString();
        updatePaginationButtons(pageNum, tableId, paginationId);
    }

    function changePage(page, tableId, paginationId) {
        const paginationElement = document.getElementById(paginationId);
        const totalPages = parseInt(paginationElement.dataset.totalPages);
        
        if (page < 1 || page > totalPages) return;
        
        showPage(page, tableId, paginationId);
    }

    function updatePaginationButtons(currentPage, tableId, paginationId) {
        const paginationElement = document.getElementById(paginationId);
        const totalPages = parseInt(paginationElement.dataset.totalPages);
        
        paginationElement.innerHTML = '';
    
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `<a class="page-link" onclick="changePage(${currentPage - 1}, '${tableId}', '${paginationId}')">&laquo;</a>`;
        paginationElement.appendChild(prevLi);
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, currentPage + 2);
        if (currentPage <= 3) {
            endPage = Math.min(5, totalPages);
        }
        if (currentPage >= totalPages - 2) {
            startPage = Math.max(1, totalPages - 4);
        }
        if (startPage > 1) {
            const li = document.createElement('li');
            li.className = 'page-item';
            li.innerHTML = `<a class="page-link" onclick="changePage(1, '${tableId}', '${paginationId}')">1</a>`;
            paginationElement.appendChild(li);

            if (startPage > 2) {
                const ellipsis = document.createElement('li');
                ellipsis.className = 'page-item disabled';
                ellipsis.innerHTML = '<span class="page-link">...</span>';
                paginationElement.appendChild(ellipsis);
            }
        }
        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${parseInt(currentPage) === i ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" onclick="changePage(${i}, '${tableId}', '${paginationId}')">${i}</a>`;
            paginationElement.appendChild(li);
        }
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const ellipsis = document.createElement('li');
                ellipsis.className = 'page-item disabled';
                ellipsis.innerHTML = '<span class="page-link">...</span>';
                paginationElement.appendChild(ellipsis);
            }

            const li = document.createElement('li');
            li.className = 'page-item';
            li.innerHTML = `<a class="page-link" onclick="changePage(${totalPages}, '${tableId}', '${paginationId}')">${totalPages}</a>`;
            paginationElement.appendChild(li);
        }
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `<a class="page-link" onclick="changePage(${currentPage + 1}, '${tableId}', '${paginationId}')">&raquo;</a>`;
        paginationElement.appendChild(nextLi);
    }

    function exportData(format) {
        switch(format) {
            case 'csv':
                exportToCSV();
                break;
            case 'excel':
                exportToExcel();
                break;
            case 'pdf':
                exportToPDF();
                break;
        }
    }

    function sortTable(tableId, columnIndex, direction) {
        const table = document.querySelector(`#${tableId} table`);
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        table.querySelectorAll('.sort-icons i').forEach(icon => {
            icon.classList.remove('active');
        });
      
        const clickedIcon = table.querySelector(`.sort-icons i[onclick*="${columnIndex}, '${direction}'"]`);
        clickedIcon.classList.add('active');
        const sortedRows = rows.sort((a, b) => {
            const aValue = a.cells[columnIndex].textContent.trim().toLowerCase();
            const bValue = b.cells[columnIndex].textContent.trim().toLowerCase();
            
            if (direction === 'asc') {
                return aValue.localeCompare(bValue);
            } else {
                return bValue.localeCompare(aValue);
            }
        });
        while (tbody.firstChild) {
            tbody.removeChild(tbody.firstChild);
        }
        sortedRows.forEach(row => tbody.appendChild(row));
        const paginationId = tableId.replace('table_', 'pagination_');
        initializePagination(tableId, paginationId);
    }
</script>
